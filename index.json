[{"content":"\u003cp\u003eMerhabalar. Bu yazıda, maldev alanındaki API Hashing yöntemini ele alacağım.\u003c/p\u003e\n\u003ch2 id=\"pe-portable-executable-yapısı-nedir\"\u003ePE (Portable Executable) Yapısı Nedir?\u003c/h2\u003e\n\u003cp\u003eHer şeyden önce PE (Portable Executable) yapısını anlamanın gerekli olduğunu düşünüyorum çünkü bu tekniğimiz tamamen bu yapı üzerine.\u003c/p\u003e\n\u003cp\u003ePE, Windows işletim sistemlerinde 32 ve 64 bit sürümlerde ve UEFI ortamlarda kullanılan executable dosyalar, object kodlar, DLL\u0026rsquo;ler ve diğerleri için bir dosya biçimidir. PE, Windows İşletim sistemi loader\u0026rsquo;in yürütülmek istenilen kodu yönetmesi için gereken veri yapıları içermektedir.\u003c/p\u003e\n\u003cp\u003eBir PE dosyası, dinamik linker\u0026rsquo;a (dynamic linker) yürütülebilir dosyanın dosya belleğin nasıl eşleceğini ve çalıştırılacağını belirten bir dizi başlık ve bölümden oluşur. Bu başlıklar ve bölümler, işletim sisteminin dosyayı doğru şekilde yüklemesine ve çalıştırmasına olanak tanır.\u003c/p\u003e\n\u003cimg src=\"https://tech-zealots.com/storage/2018/05/PE-Structure.png\"\u003e\r\n\u003ccenter\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Portable_Executable#/media/File:Portable_Executable_32_bit_Structure_in_SVG_fixed.svg\"\u003e  Portable Executabe'ın Yapısı \u003c/a\u003e\u003c/center\u003e\r\n\u003cp\u003ePE yapısında bulunan bazı önemli başlıklar şunlardır:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDOS Header (IMAGE_DOS_HEADER):\u003c/strong\u003e Bu başlık, eski MS-DOS işletim sistemleri tarafından yürütülebilir dosyanın tanınması için gerekli minimum bilgileri içerir.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDOS Stub:\u003c/strong\u003e Bu, yürütülebilir bir dosyanın başlangıcında bulunan ve DOS işletim sistemi tarafından tanınması için gereken minimum bilgileri içerir. Bu, dosyanın yürütülebilir olup olmadığını belirlemek için kullanılır.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePE Header (IMAGE_NT_HEADERS):\u003c/strong\u003e Bu başlık, PE formatına özgü önemli bilgileri içerir. İşletim sisteminin dosyayı doğru şekilde yüklemesi ve çalıştırması için gerekli olan dosya boyutu, giriş noktası adresi, isteğe bağlı DLL\u0026rsquo;ler ve diğer bilgiler buradadır.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFile Header (IMAGE_FILE_HEADER):\u003c/strong\u003e Bu başlık, dosyanın genel bilgilerini içerir. Dosyanın mimarisi, dosya türü, bölümler ve diğer bilgiler burada bulunur.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOptional Header (IMAGE_OPTIONAL_HEADER):\u003c/strong\u003e Bu başlık, dosyanın yüklenmesi ve çalıştırılması için gerekli olan bilgileri içerir. Dosyanın mimarisi, dosya türü, bölümler ve diğer bilgiler burada bulunur.\u003c/p\u003e\n\u003cbr/\u003e\r\n\u003ch3 id=\"eat-export-address-table-ve-iat-import-address-table-nedir\"\u003eEAT (Export Address Table) ve IAT (Import Address Table) Nedir?\u003c/h3\u003e\n\u003cp\u003eEAT ve IAT, PE dosyalarında bulunan iki önemli tablodur. Bu tablolar, dosyanın yürütülmesi sırasında işletim sistemi tarafından kullanılan fonksiyonların adreslerini ve adlarını içerir.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEAT (Export Address Table):\u003c/strong\u003e Dışa Aktarım Adres Tablosu olan EAT, bir PE dosyasının dışarı aktardığı fonksiyonların adreslerini ve adlarını içeren bir tablodur. Bu tablo, dinamik linker\u0026rsquo;ın (dynamic linker) yürütülebilir dosyayı yüklerken ve çalıştırırken hangi fonksiyonların kullanılabileceğini belirlemesine yardımcı olur. Bunu özellikle aklınızda tutun çünkü ileride bu tablo üzerinde işlem yapacağız.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/br\u003e\r\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eIAT (Import Address Table):\u003c/strong\u003e İçe Aktarım Adres Tablosu olan IAT, bir PE dosyasının diğer PE dosyalarından içe aktardığı fonksiyonların adreslerini ve adlarını içeren bir tablodur. Aynı şekilde bu tabloda dinamik linker\u0026rsquo;ın yürütülebilir dosyayı yüklerken ve çalıştırırken hangi fonksiyonların içe aktarılması gerektiğini belirlemesine yardımcı olur.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"api-hashing-nedir\"\u003eAPI Hashing Nedir?\u003c/h3\u003e\n\u003cp\u003eAPI Hashing, bir API fonksiyonunun adını veya diğer tanımlayıcı özelliklerini bir hash değerine dönüştüren bir tekniktir. Bu hash değeri, fonksiyonun kimliğini temsil etmek için kullanılır. API\u0026rsquo;ların adlarını ve adreslerini gizlemek için kullanılabilir.\u003c/p\u003e\n\u003cp\u003eÖrneğin, MessageBoxA fonksiyonunu içeren bir projeyi derleyip çalıştırdığımızı düşünelim. Projemizde MessageBoxA kullandığımız için derleme sırasında derleyici (compiler), MessageBoxA API\u0026rsquo;sinin adresini Import Address Table (IAT) tablosuna ekleyecektir. Bu, programı çalıştırdığımızda MessageBoxA API\u0026rsquo;sinin bu adresten erişilebileceği anlamına gelir.\u003c/p\u003e\n\u003cp\u003eAncak, MessageBoxA\u0026rsquo;nın adresini gizlemek istiyorsak ne yapabiliriz? İşte burada API hashing devreye girer. Malware\u0026rsquo;i analiz eden bir kişi, malware\u0026rsquo;da kullanılan API\u0026rsquo;ları IAT içerisinde rahatlıkla görebilir. Bu nedenle, projemizde bu API\u0026rsquo;lara farklı isimler vererek ve ardından bu farklı isimleri hashleyerek IAT\u0026rsquo;a eklersek, analiz eden kişi bu API\u0026rsquo;ları kolayca göremez. Temelde, API hashing yöntemi budur: İlgili API\u0026rsquo;nin adını değiştirip hashleyerek ve sonra IAT tablosuna ekleyerek gizlemek.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;Windows.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDWORD \u003cspan style=\"color:#a6e22e\"\u003eCalculateHash\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e data) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    DWORD hash \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0x99\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003esize_t\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(data); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        hash \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e (hash \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0xab10f29f\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e data[i]) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0xffffff\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e hash;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    DWORD hash_value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCalculateHash\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CreateThread\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CreateThread: 0x%00x\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, hash_value);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003egetchar\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYukarıdaki örnekte, verilen API\u0026rsquo;in hash değerini hesaplayan basit bir kod parçası hazırlanmıştır. İlk olarak API\u0026rsquo;nin adı alınır ve hesap yapacak \u003cstrong\u003eCalculateHash\u003c/strong\u003e fonksiyonuna gönderilir.\u003c/p\u003e\n\u003cp\u003eFonksiyon içerisinde hash adında ve 0x99 değer tutan bir DWORD değişkeni oluşturduk. Bu değer, hesaplamanın başlangıç ​​noktası olarak kullandık.\u003c/p\u003e\n\u003cp\u003eDaha sonra bir döngü başlattık. Bu döngüde, mevcut hash değerini \u003cstrong\u003e0xab10f29f\u003c/strong\u003e sabit değeri ile çarpılır. Bu, her karakterin karma değerine katkısını artırmaya yardımcı olur. Mevcut karakterin değeri, çarpılan değere eklenir. Son olarak ise sonuç, 0xffffff değeri ile bitsel AND işlemine tabi tutulur. Bu, karma değerinin 32 bitlik bir tamsayı olarak kalmasını sağlar. Bu basit bir projedir ve ilerdeki süreçlerde bu fonksiyonu kullanacağız.\u003c/p\u003e\n\u003ch2 id=\"modülün-base-addressini-bulma\"\u003eModülün Base Address\u0026rsquo;ini Bulma\u003c/h2\u003e\n\u003cp\u003eŞimdi, API\u0026rsquo;nin adresini bulma işlemine geçeceğiz. Adım adım WinDbg kullanarak, işlem modüllerini ve API\u0026rsquo;ları nasıl sıralandığını ve PE (Portable Executable) yapısını nasıl görebileceğimizi öğreneceğiz. Ardından, bu bilgileri C projesine uygulayacağız.\u003c/p\u003e\n\u003cp\u003eİlk olarak, çalışan bir işlemin PEB yapısını inceleyerek, işlemin modüllerinin taban adreslerine göz atacağız. Belirtmek gerekirse, PEB, bir işlemin çalışma zamanı bilgilerini içeren bir yapıdır. Bu yapı, işlemin modüllerinin taban adreslerini, heap ve stack bilgilerini, çevresel değişkenlerini ve diğer bilgileri içerir.\u003c/p\u003e\n\u003cp\u003e64 bit işlemlerde, PEB, Thread Environment Block bloğundan 0x60 ofsette bulunur. TEB, yürütülen iş parçacığının çalışma zamanı bilgilerini içeren bir yapıdır. TEB yapısı, GS segment kaydı tarafından işaretlenir. Dolayısıyla, PEB yapısına GS segment kaydı ile GS:[0x60] adresinden erişilebilir.\u003c/p\u003e\n\u003cp\u003eŞimdi, cmd.exe\u0026rsquo;yi çalıştıralım ve WinDbg kullanarak analize başlayalım:\u003c/p\u003e\n\u003cp\u003eİlk olarak \u003cb\u003edt\u003c/b\u003e komutu ile TEB\u0026rsquo;in yapısını inceleyerek başlayabiliriz:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/api-hashing/img1.png\"\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eBurada dikkatimizi çeken kısım \u003ccode\u003e+0x060 ProcessEnvironmentBlock : 0x000000fc4bacf000 _PEB\u003c/code\u003eolması yeterlidir. Yukarıda TEB ve PEB\u0026rsquo;ten bahsetmiştik ve burada TEB içerisinde PEB\u0026rsquo;in adresini görmekteyiz. Şimdi ise bu PEB\u0026rsquo;in adresi ile bu yapıya bir göz atalım:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/api-hashing/img2.png\"\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eYakından ilgili process\u0026rsquo;in PEB yapısını böylece görmüş olduk. Burada bizi ilgilendiren kısım \u003ccode\u003e+0x018 Ldr: 0x00007ffe`c5c153e0 _PEB_LDR_DATA\u003c/code\u003e olacaktır. Bu yapı, yüklenen modüllerin listesini içerir. Şimdi ise bu yapıya bir göz atalım:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/api-hashing/img3.png\"\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eBu yapıya göz attığımızda üç farklı liste olduğunu görmekteyiz. Bu listeler, yüklenen modüllerin listesini temsil eder. Bu listelerin içerisinde bulunan yapılar ise LDR_DATA_TABLE_ENTRY yapısına aittir. Bu yapı, yüklenen modülün bilgilerini içerir.\u003c/p\u003e\n\u003cp\u003eBu listeleri tanımadan önce \u003cstrong\u003eLIST_ENTRY\u003c/strong\u003e yapılarını anlamamiz lazım:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/api-hashing/flink.png\"\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFlink:\u003c/strong\u003e İlgili yapıyı işaret eden bir sonraki yapıdır.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBlink:\u003c/strong\u003e İlgili yapıyı işaret eden bir önceki yapıdır.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eŞimdi ise listeleri tanıyalım:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInLoadOrderModuleList:\u003c/strong\u003e Modüllerin yüklenme sırasını temsil eder.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr/\u003e\r\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInMemoryOrderModuleList:\u003c/strong\u003e Modüllerin belleğe yüklenme sırasını temsil eder.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr/\u003e \r\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInInitializationOrderModuleList:\u003c/strong\u003e Modüllerin başlatılma sırasını temsil eder.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBu listelerden ana odağımız InLoaderOrderModuleList olacaktır. Bu listenin modüllerin yüklenme sırasını temsil ettiğinden bahsetmiştik. Şimdi ise bu liste üzerinde işlem yaparak yüklenen modülleri tek tek göz atacağız.\u003c/p\u003e\n\u003cp\u003eİlk olarak InLoadOrderModuleList yapısındaki \u003ccode\u003e0x000002c0`f1e23690\u003c/code\u003e adres, yüklenen ilk modülün adresidir. Bu adresi kullanarak ilk yüklenilen modüle göz atabiliriz:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/api-hashing/img5.png\"\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eİlk yüklenen modülün detaylı bilgilerini fotoğrafta görülebileceği üzere yakından görebiliyoruz. İlk yüklenen modül cmd.exe adıyla ilgili executable dosyanın modülü olduğunu görmekteyiz. \u003ccode\u003eDllbase\u003c/code\u003e, ilgili modülün base addressini içerir. \u003ccode\u003eBaseDllName\u003c/code\u003e ise yüklenen modülün ismi. Bunları görmemiz yeterlidir araştırma için.\u003c/p\u003e\n\u003cp\u003eAraştırmalara devam etmek için bir sonraki yüklenen modüle geçebiliriz:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/api-hashing/img6.png\"\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eYüklenen diğer modülün ntdll.dll olduğunu görmekteyiz. Bu şekilde yüklenen tüm modülleri tek tek inceleyebiliriz. Son olarak diğer modüle de göz atalım:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/api-hashing/img7.png\"\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eDiğer yüklenen modüle göz attığımızda ise kernel32.dll olduğunu görmekteyiz.\u003c/p\u003e\n\u003cp\u003eŞimdi ise odağımızı C projemize çevireceğiz. Bu öğrendiklerimizi ise C projesine dökeceğiz.\u003c/p\u003e\n\u003cp\u003eIDE içerisinde bu yapılar tanımlı olmadığı için elle kendimiz tamamlamamız gerekmektedir. Şimdi ise kodlamaya geçebiliriz:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#34;utils.h\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDWORD \u003cspan style=\"color:#a6e22e\"\u003eCalculateHash\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e data) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    DWORD hash \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0x99\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003esize_t\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(data); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        hash \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e (hash \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0xab10f29f\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e data[i]) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0xffffff\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e hash;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDWORD \u003cspan style=\"color:#a6e22e\"\u003eCalcModuleHash\u003c/span\u003e(LDR_MODULE\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e ModuleLink) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e  ModuleName[\u003cspan style=\"color:#ae81ff\"\u003e64\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003esize_t\u003c/span\u003e counter \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0x0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (ModuleLink\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eBaseDllName.Buffer[counter] \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e counter \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(ModuleName) \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tModuleName[counter] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e)ModuleLink\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eBaseDllName.Buffer[counter];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tcounter\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tModuleName[counter\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCalculateHash\u003c/span\u003e((\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)\u003cspan style=\"color:#a6e22e\"\u003eCharLowerA\u003c/span\u003e(ModuleName));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eHMODULE \u003cspan style=\"color:#a6e22e\"\u003eGetModuleBaseAddress\u003c/span\u003e(DWORD Hash) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tHMODULE ModuleBaseAddress \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e NULL;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tINT_PTR PEB\t\t\t\t  \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e__readgsqword\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0x60\u003c/span\u003e);\t\u003cspan style=\"color:#75715e\"\u003e// PEB\u0026#39;in offseti\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tINT_PTR LDR\t\t\t\t  \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0x18\u003c/span\u003e;\t\t\t\t\t\u003cspan style=\"color:#75715e\"\u003e// PEB içerisindeki LDR\u0026#39;in offseti\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tINT_PTR FlinkOffset\t      \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0x10\u003c/span\u003e;\t\t\t\t\t\u003cspan style=\"color:#75715e\"\u003e// InLoadOrderModuleList\u0026#39;in offseti\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tINT_PTR PEB_LDR_DATA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(INT_PTR\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)(PEB \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e LDR);\t\t\t\t  \u003cspan style=\"color:#75715e\"\u003e// PEB içerisinden LDR\u0026#39;e ulaş\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tINT_PTR FirstFlink \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(INT_PTR\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)(PEB_LDR_DATA \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e FlinkOffset); \u003cspan style=\"color:#75715e\"\u003e// LDR içerisinden InLoadOrderModuleList yapısına ulaş\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tLDR_MODULE\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e LDR_DATA_TABLE_ENTRY \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (LDR_MODULE\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)FirstFlink;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e/* \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\t\t\tBuradaki döngü, process\u0026#39;e yüklenen tüm modül listesi üzerinde işlem yapar.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\t\t\tYüklenen her modülün base address\u0026#39;i ve hash değeri alınır ve kontrol yapılır. \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\t\t*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tLDR_DATA_TABLE_ENTRY \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (LDR_MODULE\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)LDR_DATA_TABLE_ENTRY\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eInLoadOrderModuleList.Flink;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (LDR_DATA_TABLE_ENTRY\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eBaseAddress \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e NULL) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eCalcModuleHash\u003c/span\u003e(LDR_DATA_TABLE_ENTRY) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e Hash) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t} \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (FirstFlink \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e (INT_PTR)LDR_DATA_TABLE_ENTRY);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tModuleBaseAddress \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (HMODULE)LDR_DATA_TABLE_ENTRY\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eBaseAddress;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e ModuleBaseAddress;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBu kod parçasında, öncelikle CalculateHash fonksiyonu ile API\u0026rsquo;nin hash değeri hesaplanmaktadır. Daha sonra CalcModuleHash fonksiyonu, bir modülün ismini alır ve bu ismin hash değerini hesaplar. İşlem sırasında modül ismi küçük harfe dönüştürülür ve her karakterin ASCII değeri ile önceki hash değeri kullanılarak yeni bir hash değeri hesaplanır.\u003c/p\u003e\n\u003cp\u003eSon olarak, GetModuleBaseAddress fonksiyonu, verilen bir hash değeriyle eşleşen bir modül bulur ve bu modülün başlangıç adresini döndürür. Bunun için, işlem yüklenen modül listesi üzerinde döngü yapar ve her bir modülün hash değeri CalcModuleHash ile hesaplanarak kontrol edilir. Eşleşme bulunduğunda, ilgili modülün başlangıç adresi döndürülür.\u003c/p\u003e\n\u003cp\u003eAncak bu kod parçasını kullanmamıza gerek yok. Zaten bunları yapan hazır API\u0026rsquo;lar bulunmaktadır.\u003c/p\u003e\n\u003ch2 id=\"apinin-adresini-bulma\"\u003eAPI\u0026rsquo;nin Adresini Bulma\u003c/h2\u003e\n\u003cp\u003eBase Address’i bulduktan sonra API’in adresini bulmamız gerekiyor. Bunun için ihtiyacımız olan şey, IMAGE_EXPORT_DIRECTORY yapısıdır. Bu yapı, Export Address Table’ın (EAT) adresini içerir. Bu yapıda içeren bazı önemli alanlar şunlardır:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNumberOfFunctions:\u003c/strong\u003e Export edilen fonksiyonların sayısı\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAddressOfFunctions:\u003c/strong\u003e Export edilen fonksiyonların adreslerinin bulunduğu tablonun adresi\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAddressOfNames:\u003c/strong\u003e Export edilen fonksiyonların isimlerinin bulunduğu tablonun adresi\u0026quot;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWindbg\u0026rsquo;a dönelim ve ntdll\u0026rsquo;in EAT tablosunu bularak başlayalım:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/api-hashing/img9.png\"\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003entdll\u0026rsquo;in yüklü olduğu adresin \u003ccode\u003e00007ffe`c5a90000\u003c/code\u003e olduğunu görebiliyoruz. Şimdi bu adresten IMAGE_DOS_HEADER yapısına ulaşalım:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/api-hashing/img8.png\"\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eIMAGE_DOS_HEADER yapısının adresini bulduktan sonra IMAGE_NT_HEADERS yapısına ulaşacağız.\u003c/p\u003e\n\u003cp\u003eBu yapının adresini bulmak için IMAGE_DOS_HEADER yapısının e_lfanew\u0026rsquo;in hex değeri, ntdll\u0026rsquo;in adresine ekleyerek elde edebiliriz. Böylece IMAGE_NT_HEADERS yapısına ulaşabiliriz:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/api-hashing/img10.png\"\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eDaha sonra araştırmamıza _IMAGE_OPTIONAL_HEADER64\u0026rsquo;a (0x18) ulaşarak devam edeceğiz:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e0:004\u0026gt; dt _IMAGE_OPTIONAL_HEADER64 00007ffe`c5a90000+0xe0+0x18\r\nntdll!_IMAGE_OPTIONAL_HEADER64\r\n   +0x000 Magic            : 0x20b\r\n   +0x002 MajorLinkerVersion : 0xe \u0026#39;\u0026#39;\r\n   +0x003 MinorLinkerVersion : 0x1e \u0026#39;\u0026#39;\r\n   +0x004 SizeOfCode       : 0x130000\r\n   +0x008 SizeOfInitializedData : 0xe5000\r\n   +0x00c SizeOfUninitializedData : 0\r\n   +0x010 AddressOfEntryPoint : 0\r\n   +0x014 BaseOfCode       : 0x1000\r\n   +0x018 ImageBase        : 0x00007ff9`373b0000\r\n   +0x020 SectionAlignment : 0x1000\r\n   +0x024 FileAlignment    : 0x1000\r\n   +0x028 MajorOperatingSystemVersion : 0xa\r\n   +0x02a MinorOperatingSystemVersion : 0\r\n   +0x02c MajorImageVersion : 0xa\r\n   +0x02e MinorImageVersion : 0\r\n   +0x030 MajorSubsystemVersion : 0xa\r\n   +0x032 MinorSubsystemVersion : 0\r\n   +0x034 Win32VersionValue : 0\r\n   +0x038 SizeOfImage      : 0x216000\r\n   +0x03c SizeOfHeaders    : 0x1000\r\n   +0x040 CheckSum         : 0x21eed5\r\n   +0x044 Subsystem        : 3\r\n   +0x046 DllCharacteristics : 0x4160\r\n   +0x048 SizeOfStackReserve : 0x40000\r\n   +0x050 SizeOfStackCommit : 0x1000\r\n   +0x058 SizeOfHeapReserve : 0x100000\r\n   +0x060 SizeOfHeapCommit : 0x1000\r\n   +0x068 LoaderFlags      : 0\r\n   +0x06c NumberOfRvaAndSizes : 0x10\r\n   +0x070 DataDirectory    : [16] _IMAGE_DATA_DIRECTORY\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eDikkatimizi 0x70 offsetine yani IMAGE_DATA_DIRECTORY yapısına çekiyoruz. Bu yapı, Export Address Table\u0026rsquo;ın RVA\u0026rsquo;sı (Relative Virtual Address) gibi Import Address Table için önemli bilgileri tutar.\u003c/p\u003e\n\u003cp\u003eIMAGE_EXPORT_DIRECTORY yapısı ise şu şekildedir:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etypedef\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e _IMAGE_EXPORT_DIRECTORY {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    DWORD   Characteristics;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    DWORD   TimeDateStamp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    WORD    MajorVersion;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    WORD    MinorVersion;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    DWORD   Name;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    DWORD   Base;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    DWORD   NumberOfFunctions;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    DWORD   NumberOfNames;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    DWORD   AddressOfFunctions;     \u003cspan style=\"color:#75715e\"\u003e// RVA from base of image\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    DWORD   AddressOfNames;         \u003cspan style=\"color:#75715e\"\u003e// RVA from base of image\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    DWORD   AddressOfNameOrdinals;  \u003cspan style=\"color:#75715e\"\u003e// RVA from base of image\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e} IMAGE_EXPORT_DIRECTORY, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e PIMAGE_EXPORT_DIRECTORY;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eŞimdi ise bu bilgilerin ışığında API\u0026rsquo;in adresini bulmak için C projemize aşağıdaki kodu ekleyeyelim:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePDWORD \u003cspan style=\"color:#a6e22e\"\u003egetFunctionAddressByHash\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e library, DWORD hash)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tPDWORD functionAddress \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (PDWORD)\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tHMODULE libraryBase \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLoadLibraryA\u003c/span\u003e(library);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tPIMAGE_DOS_HEADER dosHeader \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (PIMAGE_DOS_HEADER)libraryBase;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tPIMAGE_NT_HEADERS imageNTHeaders \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (PIMAGE_NT_HEADERS)((DWORD_PTR)libraryBase \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e dosHeader\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003ee_lfanew);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tDWORD_PTR exportDirectoryRVA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e imageNTHeaders\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eOptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tPIMAGE_EXPORT_DIRECTORY imageExportDirectory \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (PIMAGE_EXPORT_DIRECTORY)((DWORD_PTR)libraryBase \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e exportDirectoryRVA);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Export edilmiş fonksiyonlarla ilgili bilgiler için RVA\u0026#39;ları al\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tPDWORD addresOfFunctionsRVA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (PDWORD)((DWORD_PTR)libraryBase \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e imageExportDirectory\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eAddressOfFunctions);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tPDWORD addressOfNamesRVA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (PDWORD)((DWORD_PTR)libraryBase \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e imageExportDirectory\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eAddressOfNames);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tPWORD addressOfNameOrdinalsRVA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (PWORD)((DWORD_PTR)libraryBase \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e imageExportDirectory\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eAddressOfNameOrdinals);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (DWORD i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e imageExportDirectory\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eNumberOfFunctions; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tDWORD functionNameRVA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e addressOfNamesRVA[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tDWORD_PTR functionNameVA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (DWORD_PTR)libraryBase \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e functionNameRVA;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e functionName \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)functionNameVA;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tDWORD_PTR functionAddressRVA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// Alınan Export fonksiyonun hash değerini hesapla\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\tDWORD functionNameHash \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetHashFromString\u003c/span\u003e(functionName);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// CreateThread bulunursa Adresini ekrana bastır ve main\u0026#39;e dön\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (functionNameHash \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e hash)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tfunctionAddressRVA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e addresOfFunctionsRVA[addressOfNameOrdinalsRVA[i]];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tfunctionAddress \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (PDWORD)((DWORD_PTR)libraryBase \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e functionAddressRVA);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%s : 0x%x : %p\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, functionName, functionNameHash, functionAddress);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e functionAddress;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBu kod parçasında, getFunctionAddressByHash fonksiyonu, verilen bir hash değeriyle eşleşen bir API\u0026rsquo;nin adresini bulur ve döndürür. Bunun için, verilen kütüphane adını yükler ve IMAGE_EXPORT_DIRECTORY yapısını kullanarak Export Address Table\u0026rsquo;ın adresini alır.\u003c/p\u003e\n\u003cp\u003eDaha sonra bu yapıdaki adresler kullanılarak, Export edilen fonksiyonların adreslerinin bulunduğu tablo ve isimlerin bulunduğu tablo adresleri alınır. Daha sonra, bu tablolar üzerinde döngü yaparak, her bir fonksiyonun adını ve hash değerini hesaplar. Eşleşme bulunduğunda, ilgili fonksiyonun adresi döndürülür.\u003c/p\u003e\n\u003cp\u003eKodun tamamını birleştirelim ve basitçe CreateThread API\u0026rsquo;sini çalıştıralım:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;Windows.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etypedef\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHANDLE\u003c/span\u003e(NTAPI\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e MyCreateThread)(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tLPSECURITY_ATTRIBUTES   lpThreadAttributes,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tSIZE_T                  dwStackSize,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tLPTHREAD_START_ROUTINE  lpStartAddress,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tLPVOID                  lpParameter,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tDWORD                   dwCreationFlags,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tLPDWORD                 lpThreadId\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDWORD \u003cspan style=\"color:#a6e22e\"\u003egetHashFromString\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e string)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003esize_t\u003c/span\u003e stringLength \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estrnlen_s\u003c/span\u003e(string, \u003cspan style=\"color:#ae81ff\"\u003e50\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tDWORD hash \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0x35\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003esize_t\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e stringLength; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\thash \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e (hash \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0xab10f29f\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e string[i]) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0xffffff\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e hash;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePDWORD \u003cspan style=\"color:#a6e22e\"\u003egetFunctionAddressByHash\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e library, DWORD hash)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tPDWORD functionAddress \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (PDWORD)\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tHMODULE libraryBase \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLoadLibraryA\u003c/span\u003e(library);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tPIMAGE_DOS_HEADER dosHeader \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (PIMAGE_DOS_HEADER)libraryBase;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tPIMAGE_NT_HEADERS imageNTHeaders \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (PIMAGE_NT_HEADERS)((DWORD_PTR)libraryBase \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e dosHeader\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003ee_lfanew);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tDWORD_PTR exportDirectoryRVA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e imageNTHeaders\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eOptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tPIMAGE_EXPORT_DIRECTORY imageExportDirectory \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (PIMAGE_EXPORT_DIRECTORY)((DWORD_PTR)libraryBase \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e exportDirectoryRVA);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Export edilmiş fonksiyonlarla ilgili bilgiler için RVA\u0026#39;ları al\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tPDWORD addresOfFunctionsRVA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (PDWORD)((DWORD_PTR)libraryBase \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e imageExportDirectory\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eAddressOfFunctions);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tPDWORD addressOfNamesRVA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (PDWORD)((DWORD_PTR)libraryBase \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e imageExportDirectory\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eAddressOfNames);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tPWORD addressOfNameOrdinalsRVA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (PWORD)((DWORD_PTR)libraryBase \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e imageExportDirectory\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eAddressOfNameOrdinals);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (DWORD i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e imageExportDirectory\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eNumberOfFunctions; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tDWORD functionNameRVA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e addressOfNamesRVA[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tDWORD_PTR functionNameVA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (DWORD_PTR)libraryBase \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e functionNameRVA;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e functionName \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)functionNameVA;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tDWORD_PTR functionAddressRVA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// Alınan Export fonksiyonun hash değerini hesapla\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\tDWORD functionNameHash \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetHashFromString\u003c/span\u003e(functionName);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// CreateThread bulunursa Adresini ekrana bastır ve main\u0026#39;e dön\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (functionNameHash \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e hash)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tfunctionAddressRVA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e addresOfFunctionsRVA[addressOfNameOrdinalsRVA[i]];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tfunctionAddress \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (PDWORD)((DWORD_PTR)libraryBase \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e functionAddressRVA);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%s : 0x%x : %p\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, functionName, functionNameHash, functionAddress);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e functionAddress;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tDWORD hash \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetHashFromString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CreateThread\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tPDWORD functionAddress \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetFunctionAddressByHash\u003c/span\u003e((\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kernel32\u0026#34;\u003c/span\u003e, hash);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tDWORD TID \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tHANDLE th \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCreateThread\u003c/span\u003e(NULL, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, NULL, NULL, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eTID);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (th \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e NULL) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Failed to create thread\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Thread created successfully\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eCloseHandle\u003c/span\u003e(th);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"/images/posts/api-hashing/img11.png\"\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eSonuca baktığımızda ise başarılı bir şekilde API\u0026rsquo;in adresinin alındığını ve çalıştırıldığını görmekteyiz.\u003c/p\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Portable_Executable\"\u003e\u003cstrong\u003eEN Wikipedia - Portable Executable\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://tech-zealots.com/malware-analysis/pe-portable-executable-structure-malware-analysis-part-2/\"\u003e\u003cstrong\u003eTech Zealots - A Comprehensive Guide To PE Structure, The Layman’s Way\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.ired.team/offensive-security/defense-evasion/windows-api-hashing-in-malware\"\u003e\u003cstrong\u003eRed Team Notes - Windows API Hashing in Malware\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://labs.cognisys.group/posts/Combining-Indirect-Dynamic-Syscalls-and-API-Hashing/\"\u003e\u003cstrong\u003eCognisys Labs - Combining Indirect Dynamic Syscalls and API Hashing\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","description":"","image":"/images/posts/api-hashing-post.jpg","permalink":"http://localhost:1313/blogs/api-hashing/","title":"API hashing"},{"content":"\u003ch2 id=\"giriş\"\u003eGiriş\u003c/h2\u003e\n\u003cp\u003eValorant oyunu, çıkışından beri hem oyuncuların ilgisini çeken hem de tartışmalara neden olan bir yapım olmuştur. Özellikle oyunun anti-cheat sistemi olan Vanguard\u0026rsquo;ın, oyuncuların gizlilik haklarını ihlal ettiği ve spyware olarak adlandırılabilecek bir yazılım olduğu iddialarıyla sıkça gündeme gelmiştir. Bu iddialar, oyuncuların güvenlik endişelerini artırmış ve Valorant\u0026rsquo;ın popülaritesiyle birlikte bu konuda birçok tartışma başlatılmıştır.\u003c/p\u003e\n\u003cp\u003eReddit ve diğer sosyal medya platformlarında yayılan bu iddialar, Valorant\u0026rsquo;ın geliştiricisi olan Riot Games\u0026rsquo;in, oyuncuların bilgisayarlarında istenmeyen izleme ve kontrol yeteneklerine sahip olduğu yönünde eleştirilmesine neden olmuştur. Ancak, bu iddiaların gerçekliği ve Vanguard\u0026rsquo;ın gerçekten bir spyware olup olmadığı konusu hala netlik kazanmamıştır. Bu yazıda, Valorant\u0026rsquo;ın spyware olduğu iddialarını ele alacak ve bu iddiala bir göz atacağız.\u003c/p\u003e\n\u003ch2 id=\"uyarı\"\u003eUyarı\u003c/h2\u003e\n\u003cp\u003eBu yazıdaki analiz ve değerlendirmeler, yalnızca araştırma amaçlıdır ve herhangi bir suçlama içermemektedir. Valorant\u0026rsquo;ın güvenlik önlemleri ve Vanguard anti-cheat sistemi hakkındaki iddiaların objektif bir bakış açısıyla incelenmesi amaçlanmıştır. Bu analiz, Riot Games ya da Valorant\u0026rsquo;ın kullanıcılarına yönelik herhangi bir kötü niyetli davranışı ima etmekten ziyade, topluluğun gündeme getirdiği endişeleri ve eleştirileri anlama ve değerlendirme amacını taşımaktadır.\u003c/p\u003e\n\u003ch2 id=\"anti-cheat-yazılımları-nasıl-çalışır\"\u003eAnti-Cheat Yazılımları nasıl Çalışır?\u003c/h2\u003e\n\u003cp\u003eAraştırmamıza Anti-Cheat yazılımların nasıl çalıştığını anlayarak başlamamız gerekiyor.\u003c/p\u003e\n\u003cp\u003eGenel olarak Anti-Cheat yazılımları, oyun içerisinde hile yapılmasını engellemek ve hile yapanları tespit etmek amacıyla geliştirilmiş yazılımlardır.\u003c/p\u003e\n\u003cp\u003eBu yazılımların çalışma mantığını ikiye ayırabiliriz: \u003cstrong\u003eserver-side\u003c/strong\u003e (sunucu taraflı) ve \u003cstrong\u003eclient-side\u003c/strong\u003e (istemci taraflı) çalışma yöntemleri.\u003csup class=\"sup-for-references\"\u003e\u003ca href=\"#source-1\"\u003e[1]\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\u003cp\u003eServer-side tabanlı anti-cheat yazılımları, genellikle oyuncunun oyun sunucusuna gönderdiği verileri izler ve analiz eder. Bu veriler, oyuncunun oyunu nasıl oynadığı, hangi komutları gönderdiği, ne kadar hızlı tepki verdiği gibi bilgileri içerebilir. Amacı, oyuncunun normal oyun davranışları ile potansiyel hile kullanımı arasındaki farkları tespit etmektir.\u003c/p\u003e\n\u003cp\u003eClient-side tabanlı anti-cheat yazılımları ise oyuncunun kendi bilgisayarında çalışır ve oyuncunun bilgisayarına tamamen erişimi olabilir. Böylece oyuncunun bilgisayarında çalışan hile programlarını tespit etmeye çalışır ve bunları engellemeye veya raporlamaya yönelik çeşitli teknikler kullanabilir. Ayrıca bu yazılımlar kernel seviyesinde tam yetkili ve erişimli olarak çalışır. Yani oyuncunun bilgisayarına tamamen hakimdir.\u003c/p\u003e\n\u003cp\u003eHer iki tür anti-cheat yazılımının avantajları ve dezavantajları vardır. Server-side anti-cheat yazılımları genellikle daha güvenilirdir çünkü sunucu tarafında çalışırlar ve oyuncuların kendi bilgisayarlarında yapabilecekleri manipülasyonlara daha az açıktır. Client-side tabanlı anti-cheat yazılımları ise oyuncunun bilgisayarında daha kapsamlı bir kontrol sağlayabilir ve bu, bu yazıda sıkça tartışacağımız gizlilik ihlallerine veya oyuncunun güvenliği konusunda endişelere neden olabilir.\u003c/p\u003e\n\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Priv_rings.svg/1024px-Priv_rings.svg.png\"\u003e\r\n\u003cp\u003eİlk başlarda Anti-Cheat yazılımları Ring 3 seviyesinde çalışıyordu. Bilindiği gibi ring 3 alanı, \u003cstrong\u003eUser Mode\u003c/strong\u003e olarak geçmektedir. Eğer bu konuya aşina değilseniz hızlı bir şekilde araştırmanızı tavsiye ederim.\u003c/p\u003e\n\u003cp\u003eUser Mode alanında ayrıcalıklar çok kısıtlıdır; işletim sistemi üzerinde her ayrıcalığa sahip olmadığınız ve çok kısıtlı olduğunuz bir alan. Anti-Cheat yazılımları ise bu alanda çalışıyordu. Bu alanda doğrudan donanıma erişim sağlayamadığınız için ve belleğe erişim sağlayamadığınız için anti-cheat yazılımları herhangi bir tarama gerçekleşmeden önce gerekli izinlere sahip olması gerekirdi. Bunlarla beraber bu alanda anti-cheat yazılımları, diğer uygulamara göre izole bir şekilde çalışırdı ve bu yüzden başka bir uygulamaya ait olan datalara müdahale edemez ya da datayı değiştiremezdi.\u003csup class=\"sup-for-references\"\u003e\u003ca href=\"#source-2\"\u003e[2]\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\u003cp\u003eFakat Cheater\u0026rsquo;lar, anti-cheat yazılımların Ring 3 seviyesinde çalıştığını bildikleri için daha sofistike yöntemler geliştirdiler. Yöntemleri ise hazırladıkları hileleri Ring 3 seviyesinde değil Ring 0 alanında çalıştırmaktı yani \u003cstrong\u003eKernel Mode\u003c/strong\u003e alanında. Böylece hazırladıkları hileler daha fazla ayrıcalıklara sahip oluyordu ve tespit edilmesi ciddi anlamda zorlaşıyordu. Ring 0 yani Kernel Mode alanı, User Mode alanı gibi kısıtlamalara sahip değildir. User mode alana kıyasla daha fazla ayrıcalıklara sahiptir; herhangi bir instruction yürütülebilir ve herhangi bir bellek adresini rahatça okunabilir veya en önemlisi donanımla iletişime geçilebilir. Hatta Cheater\u0026rsquo;lar o kadar ileri seviyeye gitmişler ki, Ring 3 alanında çalışan Anti-Cheat yazılımlara ait verileri almak için bu yazılımların kullandığı system call\u0026rsquo;ları bile hooklayabiliyordı.\u003csup class=\"sup-for-references\"\u003e\u003ca href=\"#source-2\"\u003e[2]\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\u003cp\u003eOyun şirketleri ise bu yönteme karşı bir cevap vermesi gerekiyordu ve User mode alanında kısıtlı bir şekilde çalışan anti-cheat yazılımlarını kernel seviyesinde yani Ring 0 alanına taşıdılar. Ring 0\u0026rsquo;da çalışan bu yazılımlar, Ring 3 alanında olduğu gibi sistemi aynı şekilde tarayabiliyor ancak bunu direkt kernel seviyesinde yapıyor yani tamamen yüksek yetkiler ile. Bunun avantajı olduğu gibi de bu blogta baya tartışacağımız dezavantajı da vardır. Anti-Cheat yazılımların Ring 0 alanında çalışma avantajı, tespit edilemesi zor olan hileleri bile kolayca tespit etmesi ve oyunu hileye karşı daha güvenli tutmasıdır. Dezavantajı ise \u003cstrong\u003egizlilik problemi\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eDüşünün ki, eğer bu yazılımlar sizi hilelerden korumak için yüksek yetkiler ile tarama yapıp ve her şeyi okuyabiliyorsa teorik olarak bilgisayarınızdaki her şeye de erişebilir anlamına da geliyor. Bu yazılımlar kernel seviyesinde çalışıyor. Yani yüksek ayrıcalıklarla sizin bilgisayarınızdaki anlık her şeyi okuyabilir ve erişebilirler. Sizlere şu soruyu yönlendirmek isterim, oynadığınız oyunda hilecilere katlanmak istemezsiniz ve bu hilecilere karşı bir önlem alınmasını istersiniz ama bununla beraber gizliliğinizi riske atmak ister miydiniz?\u003c/p\u003e\n\u003ch2 id=\"anti-cheat-yazılımların-getirdiği-potansiyel-tehlikeler\"\u003eAnti-Cheat yazılımların getirdiği Potansiyel Tehlikeler\u003c/h2\u003e\n\u003cp\u003eBende dahil oyunlarda neredeyse hepimiz hilecilere karşı bir önlemler alınmasını isteriz. Buna karşın oyun şirketleri de anti-cheat yazılımlarını bizlere sunar ancak bu yazılımlar isteğimizi karşılasa da yanında getirdikleri ciddi sorunlar var; bunlardan biri de yukarıda ele aldığım gizlilik sorunu.\u003c/p\u003e\n\u003cp\u003eGeçmiş yıllarda anti-cheat yazılımların gizlilik ilkelerini ihlal eden olaylar olmuştur. Bunlardan biri de 2013 yılında ESEA şirketinden bir geliştiricinin işletim sisteminin kernel seviyesini kullanarak oyuncuların bilgisayarından gizli ve büyük ölçekte bir bitcoin madenciliği gerçekleştirmesi bu konuya güzel örnektir. Geliştirici, \u003cb\u003e14.000\u003c/b\u003e oyuncunun bilgisayarındaki GPU ile yerleştirdiği mining yazılımıyla yaklaşık 4.000$ elde etti\u003csup class=\"sup-for-references\"\u003e\u003ca href=\"#source-3\"\u003e[3]\u003c/a\u003e\u003c/sup\u003e ve bu olay ortaya çıktıktan sonra ESEA şirketi US Regulators (ABD Düzenleyicileri) tarafından \u003cb\u003e1.000.000\u003c/b\u003e \u003ca href=\"https://nj.gov/oag/newsreleases13/pr20131119a.html\"\u003epara cezası verildi\u003c/a\u003e. Bu olaylardan sonra ESEA şirketi bizzat kamuoyundan \u003ca href=\"https://play.esea.net/news/12692\"\u003eözür diledi\u003c/a\u003e ve ESEA şirketi mining ile elde edilen paraları ödül potları aracılığıyla oyunculara dağıttı ve American Cancer Society (Amerikan Kanser Derneği)\u0026rsquo;ne \u003cb\u003e$7.427.10\u003c/b\u003e bağışladı.\u003csup class=\"sup-for-references\"\u003e\u003ca href=\"#source-3\"\u003e[3]\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\u003cp\u003eBu yazılımlar tamamen yüksek ve ayrıcalıklı yetkiler ise oyuncunun bilgisayarını tarayabilir ve her dataya erişebilir. Bu da sistemde genel bir istikrarsızlığa neden olabileciği gibi gizlilik problemine de neden olur.\u003c/p\u003e\n\u003cp\u003eBununla beraber bazı hackerların oyuncuların bilgisayarına girmesine neden olabilecek güvenlik açıklara ya da İşletim sistemi için problemlere neden olabilirler. Anti-Cheat yazılımları kernel sürücüsü olarak çalıştığı için sürücüde bulunan kodda küçük bir hata, işletim sistemin \u003cb\u003eBlue Screen of Death (BSOD)\u003c/b\u003e benzeri çökmelere neden olurken, sürücü kodunda bulunan ciddi ihmaller veya eksiklikler ise bufferoverflow gibi açıklara neden olabilir.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003e\u0026ldquo;Ulan beko alt tarafı oyunun güvenliğini sağlıyorlar ne abarttın be güvenlik açığı bilmem ne diye\u0026rdquo;\u003c/b\u003e dediğinizi duyar gibiyim. Gelin reddit\u0026rsquo;ten bu sorunlara maruz kalmış insanların konularına bir göz atalım:\u003c/p\u003e\n\u003cimg src=\"https://github.com/x1nerama/x1nerama.github.io/blob/main/_site/images/photos-for-is-valorant-spyware/r-com1.png?raw=true\" class=\"reddit\" style=\"width: 80%;\"\u003e\r\n\u003cp\u003eBurada kullanıcı bilgisayarı açtığı anda yukarıda bahsettiğim \u003cstrong\u003eSYSTEM THREAD EXCEPTION NOT HANDLED\u003c/strong\u003e hata koduyla mavi hata ekrana düştüğünü belirtiyor. Çözüm üretmek için Windows\u0026rsquo;u başlatmayı ya da windows\u0026rsquo;u güvenli modda çalıştırmayı denediğini ancak başaramadığını belirtiyor. Son olarak ise format atarak sorunu çözdüğünü belirtiyor. (Not: \u003cstrong\u003evgk.sys\u003c/strong\u003e, RIOT Games\u0026rsquo;a ait olan bir Vanguard anti-cheat yazılımın driver yani sürücü dosyasıdır.)\u003c/p\u003e\n\u003cimg src=\"https://github.com/x1nerama/x1nerama.github.io/blob/main/_site/images/photos-for-is-valorant-spyware/r-com2.png?raw=true\" class=\"reddit\" style=\"width: 80%;\"\u003e\r\n\u003cp\u003eBurada ise kullanıcı Counter Strike 2 oyununu oynadığı sürece yine aynı hata koduyla mavi ekrana düştüğünü ve çözüm aradığını belirtiyor. Burada tam olarak anti-cheat yüzünden olduğunu söylemek biraz güç gibi gözüküyor ancak yine de paylaşmak istedim. Ama bu hata nedeninin sürücü kodundan olduğu açıkça belli.\u003c/p\u003e\n\u003cp\u003ePeki neden sürücüler mavi ekran gibi hatalara neden olur? Anti-Cheat yazılımın kernel seviyesinde çalıştığını birçok defa tekrarladım. Kernel seviyesinde çalışan sürücülerde gerçekleşen \u003cstrong\u003een ufacık\u003c/strong\u003e bir hata işletim sistemin çökmesine neden olur. Çünkü işletim sistemin en derinindesiniz. Ring 0 yani kernel mode alanı hatalara karşı çok hassastır. O yüzden kernel seviyesinde çalışıyorsanız çok dikkatli olmanız da gerekir. Oyun şirketleri ise bunları dikkate alarak anti-cheat yazılımları geliştirmeli.\u003c/p\u003e\n\u003ch2 id=\"neden-valorant-için-spyware-iddiaları-bulunmakta\"\u003eNeden Valorant için Spyware iddiaları bulunmakta?\u003c/h2\u003e\n\u003cp\u003eValorant için bu iddiaların bulunmasındaki en büyük sebeplerden biri de Çin ülkesine ait olan Tencent şirketinin RIOT Games\u0026rsquo;ın %100\u0026rsquo;üne sahip olması, bu iddialara öncülük etmektedir. Tencent şirketi, Şubat 2011\u0026rsquo;de Riot Games\u0026rsquo;in yüzde 93 hissesi için 400 milyon yatırım yapmıştı ve 16 Aralık 2015\u0026rsquo;te kalan yüzde 7 hisse için de belirtilmeyen fiyat ile yatırım yaparak %100 hisseyi almıştır.\u003csup class=\"sup-for-references\"\u003e\u003ca href=\"#source-4\"\u003e[4]\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\u003cp\u003eTencent şirketi, Çin hükümeti ile yakın ilişkileri olan bir şirkettir ve Çin hükümeti, internet üzerindeki tüm faaliyetleri kontrol etmek istemektedir. Bu durum, Tencent\u0026rsquo;in RIOT Games\u0026rsquo;ın %100\u0026rsquo;üne sahip olması ve Valorant\u0026rsquo;ın anti-cheat yazılımının kernel seviyesinde çalışması, bu yazılımın Çin hükümeti tarafından kullanılabileceği iddialarına neden olmuştur.\u003c/p\u003e\n\u003cp\u003eBu tartışmaların başlangıcını 3-4 yıl öncesinde başladığını görebiliriz. Mesela \u003ca href=\"https://www.reddit.com/r/privacy/comments/kz872x/is_valorant_malwarespyware/?rdt=41178\"\u003er/privacy\u003c/a\u003e subreddit\u0026rsquo;inde denk geldiğim şu konuya bir göz atabiliriz:\u003c/p\u003e\n\u003cimg src=\"https://github.com/x1nerama/x1nerama.github.io/blob/main/_site/images/photos-for-is-valorant-spyware/r-com3.png?raw=true\" class=\"reddit\" style=\"width: 80%;\"\u003e\r\n\u003cp\u003eİçerikte, Valorant\u0026rsquo;ın anti-cheat yazılımı olan Vanguard\u0026rsquo;ın tehlikeli olup olmayacağına dair bir soru sorulmuş. Yine içerikte bu yazılımın arka tarafta sürekli çalıştığı söyleniyor. Peki gerçekten öyle mi?\u003c/p\u003e\n\u003cp\u003eBu soruyu araştırmaya öncelikle RIOT\u0026rsquo;un kendi makalesi olan \u003ca href=\"https://support-valorant.riotgames.com/hc/tr/articles/360046160933-Vanguard-nedir\"\u003e\u0026lsquo;Vanguard Nedir\u0026rsquo;\u003c/a\u003e ile başlamaya karar verdim. Makalenin başında da kendileri de Vanguad\u0026rsquo;ın kernel modu sürücüsü olarak çalıştıklarını söylüyorlar. Ancak makalenin şu kısmı çok dikkatimi çekti:\u003c/p\u003e\n\u003cimg src=\"https://github.com/x1nerama/x1nerama.github.io/blob/main/_site/images/photos-for-is-valorant-spyware/vanguard-article.png?raw=true\"\u003e\r\n\u003cp\u003eAçıkçası bu metinler beni tatmin etmedi. Evet, RIOT makalesinde Vanguard\u0026rsquo;ın zaten bilgisayar açılışından itibaren çalıştığını açıkça söylüyor ancak bana soracak olursanız açıklama yetersiz. \u003cb\u003eGizlilik\u003c/b\u003e gibi böyle bir konuyu detaylandırarak oyunculara açıklamak ve güvenini kazanmak yerine böyle kısa açıklama ile konuyu kapatmak sizce de mantıklı mı?\u003c/p\u003e\n\u003cp\u003eBu makale bana yetersiz geldiği için tekrardan reddit ortamlarına döndüm ve tekrar araştırmaya başladım. Daha sonra r/VALORANT subreddit\u0026rsquo;inde şu konuya denk geldim:\u003c/p\u003e\n\u003cblockquote class=\"reddit-embed-bq\" style=\"height:316px\" data-embed-theme=\"dark\" data-embed-height=\"612\"\u003e\u003ca href=\"https://www.reddit.com/r/VALORANT/comments/fzxdl7/anticheat_starts_upon_computer_boot/\"\u003eAnticheat starts upon computer boot\u003c/a\u003e\u003cbr\u003e by\u003ca href=\"https://www.reddit.com/user/DolphinWhacker/\"\u003eu/DolphinWhacker\u003c/a\u003e in\u003ca href=\"https://www.reddit.com/r/VALORANT/\"\u003eVALORANT\u003c/a\u003e\u003c/blockquote\u003e\u003cscript async=\"\" src=\"https://embed.reddit.com/widgets.js\" charset=\"UTF-8\"\u003e\u003c/script\u003e\r\n\u003cp\u003eGerçekten r/VALORANT subreddit\u0026rsquo;inde baya tartışılmış bir konu.\u003c/p\u003e\n\u003cp\u003eTartışmayı başlatan kişi, vgk.sys\u0026rsquo;in bilgisayar başlangıcından itibaren çalıştığını ve bunu umursamasa da bunun nedenini soruyor ve gerçekten güzel bir soru.\u003c/p\u003e\n\u003cp\u003eDaha sonra VANGUARD anti-cheat yazılımın eski lideri olan u/RiotArkem uzun bir cevabına denk geldim. Cevap şöyle:\u003c/p\u003e\n\u003cblockquote class=\"reddit-embed-bq\" data-embed-theme=\"dark\" data-embed-height=\"876\"\u003e\u003ca href=\"https://www.reddit.com/r/VALORANT/comments/fzxdl7/comment/fn6yqbe/\"\u003eComment\u003c/a\u003e\u003cbr\u003e by\u003ca href=\"https://www.reddit.com/user/DolphinWhacker/\"\u003eu/DolphinWhacker\u003c/a\u003e from discussion\u003ca href=\"https://www.reddit.com/r/VALORANT/comments/fzxdl7/anticheat_starts_upon_computer_boot/\"\u003e\u003cno value=\"\"\u003e\u003c/no\u003e\u003c/a\u003e\u003cbr\u003e in\u003ca href=\"https://www.reddit.com/r/VALORANT/\"\u003eVALORANT\u003c/a\u003e\u003c/blockquote\u003e\u003cscript async=\"\" src=\"https://embed.reddit.com/widgets.js\" charset=\"UTF-8\"\u003e\u003c/script\u003e\r\n\u003cp\u003eBu açıklama, Vanguard üzerine okuduğum makaleye kıyasla daha açıklayıcıydı. Bir göz atalım.\u003c/p\u003e\n\u003cp\u003evgk.sys sürücüsünün gerçekten bilgisayar başlangıcında çalıştığını söylüyor ancak oyun çalışmadığı sürece hiçbir şeyin taramadığını, sunucularla iletişim kurmadığını ve mümkün olduğunca az sistem kaynağı kullanarak çalıştığını söylüyor ve bu yazılımın istendiği zaman kaldırılabileceği söyleniyor.\u003c/p\u003e\n\u003cp\u003eNeden başlangıçta çalıştığını ise sistem başlangıcında yüklenmediği sürece bilgisayarı güvenilir olarak kabul etmediği için ve en önemlisi de anti-cheat yazılımları bypass etmenin yollarından biri olan anti-cheat yazılımların yüklenmesinden önce hemen hilenin yüklenmesi ya da sistem bileşenlerini değiştirerek hileyi eklemek gibi bypass yöntemlerine çözüm olabileceği söylenmiş.\u003c/p\u003e\n\u003cp\u003eAyrıca bu sürücünün güvenliğine ve ayrıcalıklarına da değinmiş. Güvenlik olarak, güvenlik araştırma ekiplerine incelettiklerini, sürücünün mümkün olduğunda az şeyler yaptığını ve sürücüye en az ayrıcalıklar verdiklerini söylemiş\u003c/p\u003e\n\u003cp\u003eSon olarak bizim için önemli açıklama ise bu yazılımın hiçbir şekilde oyuncunun bilgisayar hakkında bir bilgi toplamadığı veya sunuculara göndermediği belirtlmiş ve sadece oyun çalıştığında etkin olabileceği söylenmiş. \u003cbr/\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eAçıklamaya göz attığımızda orijinal makaleye kıyasla daha açıklayıcı ve güzel duruyor. Şimdi ise bu topladığımız bilgileri analize dökerek bir kontrol edelim.\u003c/p\u003e\n\u003ch2 id=\"analizin-gerçekleşmesi\"\u003eAnalizin gerçekleşmesi\u003c/h2\u003e\n\u003cp\u003eŞimdi temel bilgilerden sonra artık basitçe neler yapabileceğimizi çözdük ve artık yavaştan analize başlayabiliriz.\u003c/p\u003e\n\u003cp\u003eÖncelikle analize wireshark ile başlamak istedim. RIOT Client uygulaması başlatıldığında nerelere bağlantı kurduğunu görmek istedim ve sonuç korkutucuydu:\u003c/p\u003e\n\u003cvideo controls\u003e\r\n    \u003csource src=\"https://github.com/x1nerama/x1nerama.github.io/raw/main/video/videos-for-valorant-topic/wireshark-video.mp4\" type=\"video/mp4\"\u003e\r\n\u003c/video\u003e\r\n\u003cp\u003eGöründüğü gibi Client uygulaması çalıştırıldığında düşünüldüğünden daha fazla birçok yere veri gönderiliyor.\u003c/p\u003e\n\u003cp\u003eBurada gönderilen verilerin içeriğini göremeyiz çünkü videoda görülebileceği gibi veriler şifrelenmiş halde. Dolayasıyla bunun izinden gitmemiz pek mümkün olmayacaktır. Bu yüzden bende bireysel bağlantıların adreslerinden bir kaçına göz atmaya karar verdim:\u003c/p\u003e\n\u003cimg src=\"https://github.com/x1nerama/x1nerama.github.io/blob/main/_site/images/photos-for-is-valorant-spyware/tcpview-for-riotclient.png?raw=true\" style=\"margin-bottom: 0\"\u003e\r\n\u003cdiv class=\"image-container\"\u003e \r\n    \u003cdiv class=\"overlay\"\u003e\u003c/div\u003e\r\n    \u003cdiv class=\"modal\"\u003e\r\n        \u003cspan class=\"close\"\u003e\u0026times;\u003c/span\u003e\r\n        \u003cimg src=\"https://github.com/x1nerama/x1nerama.github.io/blob/main/_site/images/photos-for-is-valorant-spyware/tcpview-for-riotclient.png?raw=true\"\u003e\r\n    \u003c/div\u003e\r\n\u003c/div\u003e  \r\n\u003cp\u003eVerilerin nereye gönderildiğine dair bir iz sürmeye çalıştığımda sonuca varamadım ancak \u003ca href=\"https://www.youtube.com/@pcsecuritychannel\"\u003eThe PC Security Channel\u003c/a\u003e adlı kanalın \u003ca href=\"https://www.youtube.com/watch?v=UqLI1xKc-L4\"\u003e\u0026lsquo;Is Valorant Spyware?\u0026rsquo;\u003c/a\u003e videosunun analizinde kendisinin birçok IP adresinin Amazon sunucularına ait olduğunu belirtiyor. Ayrıca bu konuyu hazırlarken ilham aldığım bahsi geçen videoya da göz atabilirsiniz. Gerçekten güzel ve açıklayıcı bir analiz gerçekleştiriyor.\u003c/p\u003e\n\u003cp\u003eBağlantı sayılarına buradan da göz attığımızda çok kadar fazla bağlantı olduğunu görebiliyoruz ve maalesef bu iç açıcı bir şey değil. Kendi kendime bunun abarttığımı düşündüm ve bilgisayarımda yüklü olan Epic Games uygulaması için de kontrol etmek istedim ve sonuç:\u003c/p\u003e\n\u003cimg src=\"https://github.com/x1nerama/x1nerama.github.io/blob/main/_site/images/photos-for-is-valorant-spyware/tcpview-for-epicgames.png?raw=true\" style=\"margin-bottom: 0\"\u003e\r\n\u003cdiv class=\"image-container\"\u003e \r\n    \u003cdiv class=\"overlay\"\u003e\u003c/div\u003e\r\n    \u003cdiv class=\"modal\"\u003e\r\n        \u003cspan class=\"close\"\u003e\u0026times;\u003c/span\u003e\r\n        \u003cimg src=\"https://github.com/x1nerama/x1nerama.github.io/blob/main/_site/images/photos-for-is-valorant-spyware/tcpview-for-epicgames.png?raw=true\"\u003e\r\n    \u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eGöründüğü gibi RIOT Client uygulamasına kıyasla daha az bir bağlantı var. Yani RIOT Client uygulamasının cidden fazla veri gönderimi yaptığını anlayabiliyoruz. \u003cbr/\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eDaha sonra yönümü .sys dosyasına çevirdim ve \u003cb\u003eProcess Explorer\u003c/b\u003e aracılığıyla vgk.sys\u0026rsquo;e kısaca bakmak istedim:\u003c/p\u003e\n\u003cimg src=\"https://github.com/x1nerama/x1nerama.github.io/blob/main/_site/images/photos-for-is-valorant-spyware/sys-in-pe.png?raw=true\" style=\"margin-bottom: 0\"\u003e\r\n\u003cdiv class=\"image-container\"\u003e \r\n    \u003cdiv class=\"overlay\"\u003e\u003c/div\u003e\r\n    \u003cdiv class=\"modal\"\u003e\r\n        \u003cspan class=\"close\"\u003e\u0026times;\u003c/span\u003e\r\n        \u003cimg src=\"https://github.com/x1nerama/x1nerama.github.io/blob/main/_site/images/photos-for-is-valorant-spyware/sys-in-pe.png?raw=true\"\u003e\r\n    \u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eAynı zamanda vgk.sys\u0026rsquo;in durumunu \u003cstrong\u003edriverquery\u003c/strong\u003e aracı ile daha hızlı kontrol edebiliriz:\u003c/p\u003e\n\u003cimg src=\"https://github.com/x1nerama/x1nerama.github.io/blob/main/_site/images/photos-for-is-valorant-spyware/driverquery-result.png?raw=true\" style=\"margin-bottom: 0\"\u003e\r\n\u003cdiv class=\"image-container\"\u003e \r\n    \u003cdiv class=\"overlay\"\u003e\u003c/div\u003e\r\n    \u003cdiv class=\"modal\"\u003e\r\n        \u003cspan class=\"close\"\u003e\u0026times;\u003c/span\u003e\r\n        \u003cimg src=\"https://github.com/x1nerama/x1nerama.github.io/blob/main/_site/images/photos-for-is-valorant-spyware/driverquery-result.png?raw=true\"\u003e\r\n    \u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eFakat bir sorun var. Şuan işletim sisteminde RIOT\u0026rsquo;un herhangi bir uygulaması çalışmıyor - arka planda bile -. Bu, Riot Vanguard için de geçerli:\u003c/p\u003e\n\u003cvideo controls\u003e\r\n    \u003csource src=\"https://github.com/x1nerama/x1nerama.github.io/raw/main/video/videos-for-valorant-topic/process-explorer.mp4\" type=\"video/mp4\"\u003e\r\n\u003c/video\u003e\r\n\u003cp\u003eİşletim sistemimde RIOT\u0026rsquo;un tüm uygulamaları başlangıçta başlaması kapalı. Ancak yine de vgk.sys\u0026rsquo;in çalıştığını tespit ettim. Şimdi ise akıllara şu soru takılıyor, \u003cstrong\u003e\u0026ldquo;Sadece oyunlarda hileleri engelleyen bir yazılım, ilgili oyunun kapalı olmasına rağmen neden arka planda çalışıyor?\u0026rdquo;\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eRIOT\u0026rsquo;un makalesinde zaten arka planda çalıştığını belirtse de RIOT ile ilgili tüm uygulamaların kapalı olmasına rağmen bu kernel sürücüsünün yine arka planda çalışması çok olanaksız. Oyun tamamen kapalı ise oyunlarda hileden koruyan bir yazılım beni neyden koruyabilir? \u003cbr/\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eAraştırmalara, yukarıda Vanguard\u0026rsquo;ın eski lideri Arkhem\u0026rsquo;in bahsettiği şu kısmı ele alara devam etmek istiyorum:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eYes we run a driver at system startup, it doesn\u0026rsquo;t scan anything (unless the game is running), it\u0026rsquo;s designed to take up as few system resources as possible and it doesn\u0026rsquo;t communicate to our servers. You can remove it at anytime.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eYazılımın istendiği zaman kaldırabileceği belirtilmiş. Bunu tekrar okuduktan sonra Vanguard\u0026rsquo;ı kaldırdım ardından işletim sistemini yeniden başlattım ve vgk.sys\u0026rsquo;in yine sistemde olup olmadığını kontrol ettim ve sonuç:\u003c/p\u003e\n\u003cimg src=\"https://github.com/x1nerama/x1nerama.github.io/blob/main/_site/images/photos-for-is-valorant-spyware/driverquery-result-2.png?raw=true\" style=\"margin-bottom: 0\"\u003e\r\n\u003cp\u003eGerçekten de Vanguard yazılımı kaldırıldığında vgk.sys sistemden kaldırılıyor. Bunu doğrulamış olduk. \u003cbr/\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003ch2 id=\"vgksys-sürücüsünü-analiz-etme\"\u003evgk.sys Sürücüsünü Analiz Etme\u003c/h2\u003e\n\u003cp\u003evgk.sys sürücüsünü yakından analiz etmeye başlayacaktım ancak maalesef bunun izinden süremedim. Çünkü RIOT\u0026rsquo;un hiçbir şekilde vgk.sys\u0026rsquo;i analiz etmemize fırsat vermediğini öğrendim.\u003c/p\u003e\n\u003cp\u003eİlk başta VALORANT oyununu sanal makineye kurdum ve sistemi yeniden başlattıktan sonra VANGUARD yazılımın başlatılmadığını fark ettim. Hatalardan olabileceğini düşünerek çeşitli yollar denedim ancak olmadı:\u003c/p\u003e\n\u003cimg src=\"https://github.com/x1nerama/x1nerama.github.io/blob/main/_site/images/photos-for-is-valorant-spyware/valorant-in-vm.png?raw=true\" style=\"margin-bottom: 0\"\u003e\r\nSanal makinede valorant çalıştırmak istediğimde karşıma çıkan ekran buydu. Bunun sebebi ise vgk.sys sürücüsünün başlatılmaması. \r\n\u003cp\u003eSanal makinelerde hiçbir şekilde vgk.sys sürücüsünü başlatılmıyor ve analizde fark ettiğim bir diğer şey ise sanal makine olmasa bile eğer işletim sisteminizde debugging aktifse vgk.sys çalıştırılmıyor. Yani ana makinenizde çalışan vgk.sys dosyasını analiz etmek için debugging aktifleştirseniz bile kendini devre dışı bırakacaktır. \u003cbr/\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eDinamik analizine gidemediğim için statik analize yönelmeye karar verdim ve .sys dosyasının kullandığı fonksiyonlara göz atmak istedim:\u003c/p\u003e\n\u003cimg src=\"https://github.com/x1nerama/x1nerama.github.io/blob/main/_site/images/photos-for-is-valorant-spyware/used-function.png?raw=true\" style=\"margin-bottom: 0\"\u003e\r\n\u003cp\u003eAPI\u0026rsquo;lara göz attığımızda vgk.sys sürücüsü oyuncunun bilgisayarın çalışma ortamını kontrol edebileceğini, sistem saat ve sistem dizinini elde edebilecek API\u0026rsquo;lar kullandığı gözüme çarptı. Tabi ki dinamik analiz gerçekleştiremediğimiz bunların ne amaçla kullandığını da bilemeyiz.\u003c/p\u003e\n\u003cp\u003eEğer fonksiyonların tamamına siz de göz atmak isterseniz aşağıya listenin tamamını ekliyorum:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eZwClose\t\r\nKeInitializeSpinLock\t\r\nKeAcquireSpinLockAtDpcLevel\t\r\nKeAcquireSpinLockRaiseToDpc\t\r\nKeReleaseSpinLock\t\r\nKeReleaseSpinLockFromDpcLevel\t\r\nExAllocatePoolWithTag\t\r\nKeLowerIrql\t\r\nKfRaiseIrql\t\r\nKeInitializeDpc\t\r\nKeInitializeTimer\t\r\nKeSetTimer\t\r\nMmMapLockedPagesSpecifyCache\t\r\nMmUnmapLockedPages\t\r\nMmAllocatePagesForMdl\t\r\nMmFreePagesFromMdl\t\r\nIoFreeMdl\t\r\nIoAllocateWorkItem\t\r\nIoQueueWorkItem\t\r\nIoInitializeWorkItem\t\r\nRtlDuplicateUnicodeString\t\r\nObfDereferenceObject\t\r\nKeBugCheckEx\t\r\n_stricmp\t\r\n__C_specific_handler\t\r\nKeIpiGenericCall\t\r\nExFreePoolWithTag\t\r\nProbeForRead\t\r\nIoGetCurrentProcess\t\r\nwcscpy_s\t\r\nRtlInitUnicodeString\t\r\nRtlTimeToTimeFields\t\r\nKeAreAllApcsDisabled\t\r\nExSystemTimeToLocalTime\t\r\nZwWriteFile\t\r\nIoCreateFileEx\t\r\nZwFlushBuffersFile\t\r\nswprintf_s\t\r\nvswprintf_s\t\r\n_vsnwprintf\t\r\nKeInitializeApc\t\r\nKeInsertQueueApc\t\r\nwcscat_s\t\r\nZwReadFile\t\r\nZwQuerySystemInformation\t\r\nIoGetStackLimits\t\r\nstrchr\t\r\nRtlPrefixUnicodeString\t\r\nRtlMultiByteToUnicodeN\t\r\nMmHighestUserAddress\t\r\nObReferenceObjectByHandle\t\r\nIoFileObjectType\t\r\nstrnlen\t\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eDediğim gibi dinamik olarak analiz yapamadığımız için burada kullanılan fonksiyonların ne işe yaradığını söylemek pek mümkün olmayacaktır.\u003c/p\u003e\n\u003ch1 id=\"sonuç\"\u003eSonuç\u003c/h1\u003e\n\u003cp\u003eAnaliz sonucunda, Vanguard\u0026rsquo;ın sürücüsü olan vgk.sys\u0026rsquo;in davranışlarını değerlendirdiğimizde, Valorant oyununun spyware olabileceği daha yakın olduğu düşünüyorum. Ancak, bu sonuç daha derin analizlerle doğrulanabilir veya reddedilebilir. Ayrıca RIOT\u0026rsquo;un bu konuda daha şeffaf olması gerektiğini düşünüyorum. Özellikle, Vanguard\u0026rsquo;ın ne yaptığı ve nasıl çalıştığı konusunda daha fazla bilgi sağlamaları önemlidir. Kullanıcıların gizlilik ve güvenlik endişelerini gidermek için RIOT\u0026rsquo;un daha açık bir iletişim politikası benimsemesi gerektiğini düşünüyorum.\u003c/p\u003e\n\u003cbr/\u003e\r\n\u003cp\u003eUmarım sizler için faydalı bir konu olmuştur. Diğer konuda görüşmek üzere!\u003c/p\u003e\n\u003ch1 id=\"references\"\u003eReferences\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://helda.helsinki.fi/server/api/core/bitstreams/89d7c14b-58e0-441f-a0de-862254f95551/content\" id=\"source-1\"\u003e\u003cb\u003e[1] - University of HELSINKI: Comparative Study of Anti-cheat Methods in Video Games \u003c/b\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.schellman.com/blog/cybersecurity/what-is-anti-cheat\" id=\"source-2\"\u003e\u003cb\u003e[2] - Schellman: Understanding Anti-Cheat\u003c/b\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.theregister.com/2013/11/20/esea_gaming_bitcoin_fine/\" id=\"source-3\"\u003e\u003cb\u003e[3] - TheRegister: Gaming co ESEA hit by $1m fine for hidden Bitcoin mining enslaver\u003c/b\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Riot_Games#History\" id=\"source-4\"\u003e\u003cb\u003e[4] - EN Wikipedia: Riot Games \u003c/b\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","description":"","image":"/images/posts/is-valorant-spyware-post.jpg","permalink":"http://localhost:1313/blogs/is-valorant-spyware/","title":"Is Valorant Spyware?"},{"content":"\u003cp\u003eMerhabalar. Bu konumda ptrace\u0026rsquo;in nasıl bypass edilebileceğiniden bahsedeceğim.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eptrace\u003c/code\u003e, bir process\u0026rsquo;in diğer bir process\u0026rsquo;i debug etmesini sağlayan bir \u003cstrong\u003esistem çağrısıdır\u003c/strong\u003e. Bu sistem çağrısı sayesinde bir process\u0026rsquo;in diğer process\u0026rsquo;inin memory\u0026rsquo;sine erişebiliriz. Bu sayede process\u0026rsquo;in memory\u0026rsquo;sindeki verileri okuyabilir, yazabilir ve değiştirebiliriz.\u003c/p\u003e\n\u003cp\u003eptrace, genellikle bir işlemin yürütme zamanında izlenmesi ve kontrol edilmesi amacıyla kullanılır. Bu, hata ayıklama (debugging), sistem çağrılarını izleme, işlemi duraklatma, kaynak izleme ve benzeri geliştirme ve analiz amaçları için yaygın olarak kullanılan bir sistem aracıdır.\u003c/p\u003e\n\u003ch2 id=\"ptracein-kullanımı\"\u003ePtrace\u0026rsquo;in Kullanımı\u003c/h2\u003e\n\u003cp\u003eC ile aşağıdaki basit kod ile ptrace\u0026rsquo;in kullanımı hakkında bilgi sahibi olabiliriz:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;sys/ptrace.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eptrace\u003c/span\u003e(PTRACE_TRACEME, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Dostum sanırım Debugging yapıyorsun hadi seni bir çıkışa alalım\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Debugging yok Security var!\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eProgramıma baktığımızda ilk aşamada bir \u003ccode\u003ePTRACE_TRACEME\u003c/code\u003e parametresi ile \u003ccode\u003eptrace\u003c/code\u003e çağrısı yapıldığını görüyoruz. Bu parametre, process\u0026rsquo;in kendisini izlemek için kullanacağımızı belirtir. Bu fonksiyonun geri dönüş değeri 0\u0026rsquo;dan küçükse, işlemi izlemek için izin verilmediği anlamına gelir. Bu durumda programımız \u003cstrong\u003eDostum sanırım Debugging yapıyorsun hadi seni bir çıkışa alalım\u003c/strong\u003e çıktısını verir. Eğer geri dönüş değeri 0 ise \u003cstrong\u003eDebugging yok Security var!\u003c/strong\u003e çıktısını verir.\u003c/p\u003e\n\u003ch2 id=\"fonksiyon-parametreleri\"\u003eFonksiyon Parametreleri\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eptrace\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eenum\u003c/span\u003e __ptrace_request request, \u003cspan style=\"color:#66d9ef\"\u003epid_t\u003c/span\u003e pid, \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eaddr, \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003edata);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbr/\u003e\r\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eenum\u003c/span\u003e __ptrace_request request\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eilk parametre, ptrace\u0026rsquo;in hangi işlemi yapacağını belirten bir değerdir. Biz örnek senaryo için \u003ccode\u003ePTRACE_TRACEME\u003c/code\u003e kullandık. Bu parametre, Process\u0026rsquo;in kendisini izlemek için kullanacağımızı belirtir. Yani ikinci bir process değil o an çalıştırılacak process\u0026rsquo;i izlemeye alacaktır.\n\u003cbr/\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epid_t\u003c/span\u003e pid\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eİkinci parametre, işlem kimliğidir. Bu değer, işlemi izlemek isteyen işlem tarafından kullanılır.\n\u003cbr/\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eaddr\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eÜçüncü parametre, işlemin adresidir. Bu değer, işlemi izlemek isteyen işlem tarafından kullanılır.\n\u003cbr/\u003e \u003cbr/\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003edata\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDördüncü parametre, işlemin verisidir. Bu değer, işlemi izlemek isteyen işlem tarafından kullanılır.\u003c/p\u003e\n\u003ch2 id=\"ptracein-bypass-edilmesi\"\u003ePtrace\u0026rsquo;in Bypass Edilmesi\u003c/h2\u003e\n\u003cp\u003eŞimdi ise önemli kısma geldik. Kali Linux\u0026rsquo;ta \u003ccode\u003eradare2 -w \u0026lt;program\u0026gt;\u003c/code\u003e komutuyla programımızı açıyoruz. Daha sonra \u003ccode\u003eaaa\u003c/code\u003e komutuyla programımızı analiz ediyoruz. \u003ccode\u003eafl\u003c/code\u003e komutuyla fonksiyonlarımızı görüntülüyoruz:\u003c/p\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/x1nerama/x1nerama.github.io/main/images/photos-for-ptrace-blog/photo1.png\"\u003e\r\n\u003cp\u003eFonksiyonlarda \u003cstrong\u003emain\u003c/strong\u003e ve \u003cstrong\u003eptrace\u003c/strong\u003e görmemiz yeterli olacaktır. Şimdi ise \u003ccode\u003es main\u003c/code\u003e komutuyla main fonksiyonuna gidelim ve \u003ccode\u003epdf\u003c/code\u003e komutuyla main fonksiyonumuzu görüntülüyelim:\u003c/p\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/x1nerama/x1nerama.github.io/main/images/photos-for-ptrace-blog/photo2.png\"\u003e\r\n\u003cp\u003emain içerisine baktığımızda ilk olarak prelog dediğimiz işlemin gerçekleştiğini görmekteyiz. Daha sonra ptrace fonksiyonun çağırıldığını görüyoruz ancak ondan önce bu fonksiyon için parametreler hazırlanıyor ve tüm parametrelere 0 değeri verilmiş. Fonksiyonun çağırılmasından sonra ise rax register\u0026rsquo;ın \u003ccode\u003etest\u003c/code\u003e instruction ile test edildiğini görmekteyiz.\u003c/p\u003e\n\u003cp\u003eDaha sonra \u003ccode\u003ejns\u003c/code\u003e (Jump if not Sign) ile eğer test edilen sonuç negatif bir sayı değil ise \u003cstrong\u003e( rax \u0026gt; 0 )\u003c/strong\u003e \u003cstrong\u003e0x00001186\u003c/strong\u003e adresine atlanıyor. Bu atlanılan kısımda \u003cstrong\u003eDebugging yok Security Var!\u003c/strong\u003e mesajı bastırılıyor. Yani bu kısım debugging edilmediğinde atlanılan bir kısım.\u003c/p\u003e\n\u003cp\u003eEğer bu işlem başarısız olunursa yani sonuç negatif bir sayı ise \u003cstrong\u003e0x00001170\u003c/strong\u003e adresinden devam ediyor. Burası ise programın debugging edildiğinde atlanılan kısım. Bu kısımda ise \u003cstrong\u003eDostum sanırım Debugging yapıyorsun hadi seni bir çıkışa alalım\u003c/strong\u003e mesajı bastırılıyor ve program bitiriliyor. Yani bu kısmın decompiler\u0026rsquo;ı şu şekilde olabilir:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e rax \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eptrace\u003c/span\u003e(PTRACE_TRACEME, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (rax \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Debugging yok Security var!\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Dostum sanırım Debugging yapıyorsun hadi seni bir çıkışa alalım\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eKodların source code\u0026rsquo;larını bilmediğimizi varsayarsak şuan biz bu programı Assembly kodları ile nasıl çalıştığını kabaca biliyoruz. bypass etmeden önce direkt programı çalıştıralım ve ne olduğuna bakalım:\u003c/p\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/x1nerama/x1nerama.github.io/main/images/photos-for-ptrace-blog/photo4.png\"\u003e\r\n\u003cp\u003eGöründüğü gibi debugger ile programı çalıştırdığımızda \u003cstrong\u003e\u0026ldquo;Dostum sanırım Debugging yapıyorsun hadi seni bir çıkışa alalım\u0026rdquo;\u003c/strong\u003e mesajını alıyoruz. Şimdi ise bypass etmeye çalışalım.\u003c/p\u003e\n\u003cp\u003eBasit bir ptrace bypass etmek ile ilgili bloglarda genellikle rax register\u0026rsquo;ın değeri 0 yapılarak anlatılır. Bu da işe yarayan bir yöntemdir ancak ben burada farklı olarak sizlere farklı bir yöntem göstereceğim. Ayrıca bu yöntemin reverse engineering için sizlere daha iyi bir anlayış sağlayacağını ümit ediyorum.\u003c/p\u003e\n\u003cp\u003eYapacağımız şey oldukça basit. Sadece karşılaştırmada kullanılan \u003ccode\u003ejns\u003c/code\u003e komutunu \u003ccode\u003ejs\u003c/code\u003e olarak değiştirmek. Bunu neden yaptığımızı bu bypass sürecinde daha iyi anlayacağız. Let\u0026rsquo;s go!\u003c/p\u003e\n\u003cp\u003eÖncelikle programı çalıştırmadan \u003ccode\u003es\u003c/code\u003e komutu ile \u003cstrong\u003e0x0000116e\u003c/strong\u003e adresine gidelim. Burası \u003ccode\u003ejns\u003c/code\u003e ile değerin karşılaştırma yapıldığı kısım:\u003c/p\u003e\n\u003cimg src=\"https://github.com/x1nerama/x1nerama.github.io/blob/main/images/photos-for-ptrace-blog/photoo3.png?raw=true\"\u003e\r\n\u003cp\u003eArdından buradaki assembly kodunu \u003ccode\u003ejs\u003c/code\u003e olarak değiştirelim. Bunun için \u003ccode\u003ewx 0x78\u003c/code\u003e komutunu kullanacağız. \u003cstrong\u003e0x78\u003c/strong\u003e değeri \u003ccode\u003ejs\u003c/code\u003e instruction\u0026rsquo;a karşılık gelmektedir:\u003c/p\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/x1nerama/x1nerama.github.io/main/images/photos-for-ptrace-blog/photo6.png\"\u003e\r\n\u003cp\u003eGöründüğü gibi \u003ccode\u003ejns\u003c/code\u003e instruction\u0026rsquo;ı \u003ccode\u003ejs\u003c/code\u003e instruction\u0026rsquo;ına çevrilmiş. Şimdi ise \u003ccode\u003edc\u003c/code\u003e komutuyla programımızı çalıştıralım. Ancak ondan önce disassemble ettiğimiz main\u0026rsquo;in son haline bir göz atalım:\u003c/p\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/x1nerama/x1nerama.github.io/main/images/photos-for-ptrace-blog/photo7.png\"\u003e\r\n\u003cp\u003emain\u0026rsquo;in son haline baktığımızda fonksiyonun geri dönüş adresini karşılaştırdığımız kısımda \u003ccode\u003ejns\u003c/code\u003e değil \u003ccode\u003ejs\u003c/code\u003e görmekteyiz. Böylece yapılacak işlemler tam tersine dönmüş oldu:\u003c/p\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/x1nerama/x1nerama.github.io/main/images/photos-for-ptrace-blog/photo8.png\"\u003e\r\n\u003cp\u003eGöründüğü gibi debugger içerisinde programı çalıştırdığımızda \u003cstrong\u003e\u0026ldquo;Debugging yok Security var!\u0026rdquo;\u003c/strong\u003e mesajını alıyoruz. Bu da bize ptrace\u0026rsquo;in bypass edildiğini gösteriyor. Yaptığımız işlemden sonra programın decompiler\u0026rsquo;ı şu şekilde olabilir:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e rax \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eptrace\u003c/span\u003e(PTRACE_TRACEME, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (rax \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Debugging yok Security var!\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Dostum sanırım Debugging yapıyorsun hadi seni bir çıkışa alalım\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eProgramı debugger ile çalıştırdığımız için bu if koşulun içerisine girecektir çünkü rax, -1 değerini alacaktır. \u003ccode\u003ejs\u003c/code\u003e Instruction\u0026rsquo;u negatif değerleri kontrol etmek için kullanılır.\u003c/p\u003e\n\u003cp\u003eBu değişikliklerin ardından program için potansiyel bir sorun oluşmakta. Size şunu sormak istiyorum debug etmeden normal şartlarda bu programı çalıştırdığımızda sizce ne olur? Gelin bir de buna bakalım:\u003c/p\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/x1nerama/x1nerama.github.io/main/images/photos-for-ptrace-blog/photo9.png\"\u003e\r\n\u003cp\u003eNormal şekilde programı başlattığımızda hata mesajımızla karşılaşıyoruz. Zaten bunun sebebini detaylandırdım. Programı debugger ile çalıştırmadığımız için 0 değerinde kalıyor. Programı reverse ettiğimizde koşulu \u003ccode\u003ejs\u003c/code\u003e olarak değiştirmiştik. Dolayasıyla programı çalıştırdığımızda hata mesajını almamak için rax\u0026rsquo;ın negatif bir değer alması gerekiyor; bunun için de debugger ile çalıştırılması gerekir.\u003c/p\u003e\n","description":"","image":"/images/posts/reverse-engineering.jpeg","permalink":"http://localhost:1313/blogs/bypass-ptrace/","title":"Bypass Ptrace"}]